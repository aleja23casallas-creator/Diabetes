
from pandas import read_csv
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OrdinalEncoder
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from matplotlib import pyplot
import streamlit as st
import io
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


st.title("Diabetes-Datos cl√≠nicos de 130 hospitales y centros de atenci√≥n integrados en EE.UU")
st.markdown("""
**El conjunto de datos:**
Readmisiones hospitalarias por diabetesde atenci√≥n cl√≠nica en 130 hospitales de EE. UU. y redes de prestaci√≥n integradas.
Periodo: 10 a√±os (1999‚Äì2008)



Los datos contienen atributos como el n√∫mero de pacientes, la raza, el sexo, la edad, el tipo de ingreso, el tiempo en el hospital, la especialidad m√©dica del m√©dico de admisi√≥n, el n√∫mero de pruebas de laboratorio realizadas, el resultado de la prueba de HbA1c, el diagn√≥stico, el n√∫mero de medicamentos, los medicamentos para la diabetes, el n√∫mero de visitas ambulatorias, hospitalarias y de emergencia en el a√±o anterior a la hospitalizaci√≥n, etc.

Objetivo: Analizar la readmisi√≥n de pacientes diab√©ticos, es decir, si despu√©s del alta regresan al hospital dentro de 30 d√≠as, despu√©s de 30 d√≠as o nunca

""")

st.subheader("Obtener los datos")

st.markdown("---")


# =========================
# Mostrar el docstring inicial (tu explicaci√≥n original)
# =========================
if __doc__:
    st.markdown(__doc__)


# =========================
# CARGA DE DATOS 

# =========================
df = None
try:
    df = pd.read_csv("diabetic_data.csv")
except Exception:
    df = pd.read_csv("/content/drive/MyDrive/ML-BIOESTADISTICA/diabetic_data.csv")

st.write("Vista inicial del DataFrame:")
st.write(df.head())

# Ver valores √∫nicos en las columnas categ√≥ricas codificadas
st.write("admission_type_id:", sorted(df["admission_type_id"].unique()))
st.write("discharge_disposition_id:", sorted(df["discharge_disposition_id"].unique()))
st.write("admission_source_id:", sorted(df["admission_source_id"].unique()))

#Convertir a string
df["admission_type_id"] = df["admission_type_id"].astype(str)
df["discharge_disposition_id"] = df["discharge_disposition_id"].astype(str)
df["admission_source_id"] = df["admission_source_id"].astype(str)

map_admission_type = {
    "1": "Emergencia",
    "2": "Urgente",
    "3": "Electivo",
    "4": "Reci√©n nacido",
    "5": "Sin_info",
    "6": "Sin_info",
    "7": "Centro de trauma",
    "8": "Sin_info"
}

map_discharge_disposition = {
    "1": "Alta a casa",
    "2": "Alta a otro hospital a corto plazo",
    "3": "Alta a centro de enfermer√≠a especializada",
    "4": "Alta a centro de cuidados intermedios",
    "5": "Alta a otro tipo de atenci√≥n hospitalaria",
    "6": "Cuidados de salud en casa",
    "7": "Salida contra recomendaci√≥n m√©dica",
    "8": "Alta a casa con cuidados",
    "9": "Admitido como paciente hospitalizado",
    "10": "Cuidados paliativos en casa",
    "11": "Cuidados paliativos en centro m√©dico",
    "12": "Alta a hospital psiqui√°trico",
    "13": "Alta a otra instalaci√≥n de rehabilitaci√≥n",
    "14": "Sin_info",
    "15": "Sin_info",
    "16": "Alta a hospital federal",
    "17": "Alta a otra instituci√≥n",
    "18": "Alta a custodia policial",
    "19": "Sin_info",
    "20": "Alta por orden judicial",
    "21": "Sin_info",
    "22": "Falleci√≥ en casa",
    "23": "Falleci√≥ en instalaci√≥n m√©dica",
    "24": "Falleci√≥ en lugar desconocido",
    "25": "Falleci√≥ en cuidados paliativos",
    "28": "Falleci√≥ en centro de enfermer√≠a especializada"
}

map_admission_source = {
    "1": "Referencia m√©dica",
    "2": "Referencia desde cl√≠nica",
    "3": "Referencia desde aseguradora HMO",
    "4": "Transferencia desde hospital",
    "5": "Transferencia desde centro de enfermer√≠a especializada",
    "6": "Transferencia desde otro centro de salud",
    "7": "Sala de emergencias",
    "8": "Corte o custodia policial",
    "9": "Sin_info",
    "10": "Transferencia desde hospital de acceso cr√≠tico",
    "11": "Parto normal",
    "12": "Sin_info",
    "13": "Nacido en hospital",
    "14": "Nacido fuera de hospital",
    "15": "Sin_info",
    "17": "Sin_info",
    "20": "Sin_info",
    "22": "Sin_info",
    "25": "Sin_info"
}

# --- 3. Reemplazar con map() y 'Desconocido' para valores fuera del diccionario ---
df["admission_type_id"] = df["admission_type_id"].map(lambda x: map_admission_type.get(x, "Desconocido"))
df["discharge_disposition_id"] = df["discharge_disposition_id"].map(lambda x: map_discharge_disposition.get(x, "Desconocido"))
df["admission_source_id"] = df["admission_source_id"].map(lambda x: map_admission_source.get(x, "Desconocido"))

# --- 4. Verificaci√≥n r√°pida ---
st.write(df[["admission_type_id", "discharge_disposition_id", "admission_source_id"]].head())

# Tama√±o y forma del Dataset
st.write("Shape:", df.shape)
st.write("N√∫mero de filas:", df.shape[0])
st.write("N√∫mero de columnas:", df.shape[1])

# Revisar duplicados
st.write("Duplicados:", df.duplicated().sum())

missing_vals = ["None", "?"]
df = df.replace(missing_vals, pd.NA)

# Verificar resultado en algunas columnas
st.write(df['max_glu_serum'].value_counts(dropna=False))
st.write(df['weight'].value_counts(dropna=False))

faltantes = df.isna().sum().sort_values(ascending=False)
faltantes_pct = (df.isna().mean() * 100).sort_values(ascending=False)

faltantes_df = pd.DataFrame({
    'Faltantes': faltantes,
    'Porcentaje': faltantes_pct
})
st.write(faltantes_df)

cat_cols = df.select_dtypes(include='object').columns

for col in cat_cols:
    if df[col].isna().sum() > 0:
        df[col] = df[col].fillna("Sin_info")
st.write(df[cat_cols].isna().sum().sort_values(ascending=False))

num_cols = df.select_dtypes(include=['int64','float64']).columns
st.write(df[num_cols].isna().sum().sort_values(ascending=False))

st.write(df)

df = df.drop(columns=["encounter_id", "patient_nbr"])

#Variables num√©ricas (PCA)
num_cols_pca = [
    "time_in_hospital", "num_lab_procedures", "num_procedures",
    "num_medications", "number_outpatient", "number_emergency",
    "number_inpatient", "number_diagnoses"
]

#Variables categ√≥ricas (MCA)
cat_cols_mca = [
    "race", "gender", "age", "weight", "payer_code",
    "medical_specialty", "diag_1", "diag_2", "diag_3",
    "max_glu_serum", "A1Cresult",
    "metformin", "repaglinide", "nateglinide", "chlorpropamide",
    "glimepiride", "acetohexamide", "glipizide", "glyburide",
    "tolbutamide", "pioglitazone", "rosiglitazone", "acarbose",
    "miglitol", "troglitazone", "tolazamide", "examide",
    "citoglipton", "insulin", "glyburide-metformin",
    "glipizide-metformin", "glimepiride-pioglitazone",
    "metformin-rosiglitazone", "metformin-pioglitazone",
    "change", "diabetesMed"
]

#Categ√≥ricas que estan con c√≥digos num√©ricos
categoricas_codigos = [
    "admission_type_id", "discharge_disposition_id", "admission_source_id"
]

#  las tenemos en cuenta para al MCA
cat_cols_mca.extend(categoricas_codigos)

# Verificaci√≥n
st.write("PCA (num√©ricas):", len(num_cols_pca), num_cols_pca)
st.write("MCA (categ√≥ricas):", len(cat_cols_mca), cat_cols_mca)

st.markdown("""üìäDistribuci√≥n de la variable objetivo (readmitted)""")

st.write(df["readmitted"].value_counts())

# Gr√°fico de barras de readmitted
fig, ax = plt.subplots(figsize=(6,4))
df["readmitted"].value_counts().plot(
    kind="bar",
    ax=ax,
    color=["#66c2a5","#fc8d62","#8da0cb"]
)
ax.set_title("Distribuci√≥n de readmisiones")
ax.set_ylabel("N√∫mero de pacientes")
ax.set_xlabel("Readmisi√≥n")
st.pyplot(fig)

st.markdown("""üìä Histograma / KDE de variables num√©ricas

Las num√©ricas relevantes

time_in_hospital: la mayor√≠a de pacientes pasan cuantos d√≠as?

num_lab_procedures: algunos pacientes tienen muchos m√°s ex√°menes que otros?

num_medications: hay tendencia a medicar m√°s a los que reingresan?
""")

num_cols = ["time_in_hospital", "num_lab_procedures", "num_medications"]
# Histograma m√∫ltiple
axes = df[num_cols].hist(bins=30, figsize=(12,6), edgecolor="black")
plt.suptitle("Distribuci√≥n de variables num√©ricas")
st.pyplot(plt.gcf())

st.markdown("""üìä Boxplot por clase objetivo""")

# Boxplot
fig, ax = plt.subplots(figsize=(8,5))
sns.boxplot(x=df["readmitted"], y=df["time_in_hospital"], palette="Set3", ax=ax)
ax.set_title("Tiempo en hospital seg√∫n readmisi√≥n")
ax.set_xlabel("Readmisi√≥n")
ax.set_ylabel("Tiempo en hospital (d√≠as)")
st.pyplot(fig)

st.markdown("üìä **Reingreso seg√∫n tipo de alta (discharge_disposition_id)**")

# Contar n√∫mero de pacientes por tipo de alta y readmisi√≥n
count_df = df.groupby(['discharge_disposition_id', 'readmitted']).size().reset_index(name='count')

# Gr√°fico de barras agrupadas
fig, ax = plt.subplots(figsize=(12,6))
sns.barplot(data=count_df, x='discharge_disposition_id', y='count', hue='readmitted', palette='Set2', ax=ax)
ax.set_title("Reingreso seg√∫n tipo de alta hospitalaria")
ax.set_xlabel("Discharge Disposition")
ax.set_ylabel("N√∫mero de pacientes")
plt.xticks(rotation=45, ha='right')
plt.legend(title='Readmisi√≥n')
plt.tight_layout()
st.pyplot(fig)


st.markdown("""üìä Distribucion de g√©nero o raza""")

fig, ax = plt.subplots(figsize=(6,4))
sns.countplot(x=df["gender"], palette="pastel", ax=ax)
ax.set_title("Distribuci√≥n por g√©nero")
st.pyplot(fig)

fig, ax = plt.subplots(figsize=(8,5))
sns.countplot(x=df["race"], palette="muted", ax=ax)
ax.set_title("Distribuci√≥n por raza")
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown("""üìä Mapa de calor de correlaciones (solo num√©ricas)""")

fig, ax = plt.subplots(figsize=(10,8))
sns.heatmap(df[num_cols_pca].corr(), annot=True, cmap="coolwarm", fmt=".2f", ax=ax)
ax.set_title("Matriz de correlaci√≥n - variables num√©ricas")
st.pyplot(fig)

x= df.drop("readmitted", axis=1)
y= df["readmitted"]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test  = train_test_split(x,y, test_size=0.2, stratify=y, random_state=42)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(x_train[num_cols_pca])
X_test_scaled  = scaler.transform(x_test[num_cols_pca])

st.markdown("""# TAREA 1: PCA + MCA""")

from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler as _SS_  
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np 
import pandas as pd 

# PCA con todos los componentes
pca = PCA()
X_pca = pca.fit_transform(X_train_scaled)

# Varianza acumulada
explained_var = np.cumsum(pca.explained_variance_ratio_)

fig, ax = plt.subplots(figsize=(8,5))
ax.plot(range(1, len(explained_var) + 1), explained_var, marker='o', linestyle='--')
ax.axhline(y=0.85, color='r', linestyle='-')
ax.set_xlabel('N√∫mero de componentes principales')
ax.set_ylabel('Varianza acumulada explicada')
ax.set_title('Varianza acumulada explicada por PCA')
ax.grid(True)
st.pyplot(fig)

# Scatterplot PC1 vs PC2
fig, ax = plt.subplots(figsize=(8,6))
sns.scatterplot(x=X_pca[:,0], y=X_pca[:,1], hue=y_train, palette='Set1', alpha=0.7, ax=ax)
ax.set_xlabel('PC1')
ax.set_ylabel('PC2')
ax.set_title('Scatterplot PC1 vs PC2')
ax.legend(title='Clase', labels=['NO', '<30', '>30'])
st.pyplot(fig)

# Loadings (cargas) de las variables en las PCs
loadings = pd.DataFrame(pca.components_.T,columns=[f'PC{i+1}' for i in range(pca.n_components_)],index=num_cols_pca)

fig, ax = plt.subplots(figsize=(12,8))
sns.heatmap(loadings.iloc[:,:10], annot=True, cmap='coolwarm', center=0, ax=ax)
ax.set_title('Heatmap de loadings (primeras PCs)')
st.pyplot(fig)

# Aplicar PCA
pca = PCA(n_components=0.85)
X_pca = pca.fit_transform(X_train_scaled)

st.write(f"N√∫mero de componentes principales para explicar 85% varianza: {pca.n_components_}")
st.write(f"Varianza explicada acumulada por estas componentes: {sum(pca.explained_variance_ratio_):.4f}")


st.markdown("""# An√°lisis de los resultados obtenidos en MCA y PCA

An√°lisis de resultados PCA

Al aplicar PCA sobre las variables num√©ricas del dataset:

Se observ√≥ que con 6 componentes principales se logra conservar la mayor parte de la informaci√≥n sin necesidad de mantener todas las variables originales, lo que significa que el espacio de alta dimensionalidad de las variables num√©ricas (como valores de laboratorio, n√∫mero de visitas, edad, etc.) puede representarse en un espacio reducido, facilitando el an√°lisis.

El scatterplot mostr√≥ cierta separaci√≥n entre las clases de readmisi√≥n (NO, <30, >30), aunque con solapamiento. Esto confirma que existen patrones num√©ricos que ayudan a explicar parte de la variabilidad entre pacientes, pero no son totalmente discriminantes por s√≠ solos.

Conclusi√≥n
La reducci√≥n permiti√≥ simplificar el conjunto de variables num√©ricas manteniendo m√°s del 85% de la varianza. Esto mejora la eficiencia y reduce el riesgo de sobreajuste, aunque por s√≠ sola la variabilidad num√©rica no separa completamente las clases.

An√°lisis de resultados MCA

Con el MCA aplicado a las variables categ√≥ricas (como g√©nero, tipo de admisi√≥n, tipo de alta, diagn√≥sticos, etc.):

Se encontr√≥ que con aproximadamente 13 dimensiones se logra superar el 85% de varianza acumulada, indicando que gran parte de la informaci√≥n categ√≥rica puede concentrarse en un espacio reducido.

El MCA permiti√≥ visualizar la relaci√≥n entre categor√≠as: por ejemplo, algunos tipos de admisi√≥n o de disposici√≥n al alta tienden a asociarse con mayor probabilidad de reingreso.


Integraci√≥n PCA + MCA

Al combinar los componentes num√©ricos (PCA) y categ√≥ricos (MCA):

Se obtiene un conjunto de datos reducido y balanceado entre ambos tipos de informaci√≥n, manteniendo la mayor parte de la varianza de los datos originales.

""")
